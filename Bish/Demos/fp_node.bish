def pair(var? v0, var? v1) => func (bool b) => (b ? v1 : v0);
def first(func node) => node(false);
def second(func node) => node(true);
def node(int value, func? next) => pair(value, next);
def node(int value) => node(value, null);
def add_front(func list, int value) {
	var newNode = node(value, list);
	return newNode;
};
def add_end(func list, int value) {
	if (second(list) ~ null) {
		var newNode = node(value);
		return node(first(list), newNode);
	};
	return node(first(list), add_end(second(list), value));
};
def for_each(func? list, func f) {
	if (list !~ null){
		f(first(list));
		for_each(second(list), f);
	}
};

var list = node(0);
list = add_end(list, 1);
list = add_end(list, 2);
list = add_end(list, 3);
for_each(list, func(int x) => print(x));