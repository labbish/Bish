bool steps = true;
def last (func f) => f();
def norm (func fx) {
	if (fx() ~ null) {return 0};
	return norm(last(fx)) + 1;
};
def f0 () {};
def succ (func f) => func() => f;
func f1 = succ(f0);
func f2 = succ(f1);
func f3 = succ(f2);
func f4 = succ(f3);
func f5 = succ(f4);
func f6 = succ(f5);
func f7 = succ(f6);
func f8 = succ(f7);
func f9 = succ(f8);
def eq (func fx, func fy) {
	if (steps) {print("eq", norm(fx), norm(fy), "\n")};
	if (fx() ~ null) {return fy() ~ null};
	if (fy() ~ null) {return fx() ~ null};
	return eq (fx(), fy());
};
def add (func fx, func fy) {
	if (steps) {print("add", norm(fx), norm(fy), "\n")};
	if (eq(fx, f0)) {return fy};
	return succ(add(last(fx), fy));
};
def mul (func fx, func fy) {
	if (steps) {print("mul", norm(fx), norm(fy), "\n")};
	if (eq(fx, f0)) {return f0};
	return add(mul(last(fx), fy), fy);
};